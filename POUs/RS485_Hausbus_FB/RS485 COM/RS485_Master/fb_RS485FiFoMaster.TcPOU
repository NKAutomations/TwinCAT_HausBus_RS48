<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="fb_RS485FiFoMaster" Id="{ed0ce5c6-7884-454c-84d9-13aef49b7869}" SpecialFunc="None">
    <Declaration><![CDATA[(*======================================================================================================================================*)
(*fb_RS485FiFoMaster:	Einfaches Senden eines Telegrams über RS485*)
(*
Date          	| Version    	| created under        	| Author          	| Remark *)
(*====================================================================================================================================================*)
(*10/05/2025   	| 1.00      		| TC3		  		| N.Kersting       | first release *)
(*10/05/2025   	| 1.01      		| TC3		  		| N.Kersting       | Nun wird der Empfang auch mit Implementiert  *)
(*13/05/2025   	| 1.02      		| TC3		  		| N.Kersting       | Busbelastungstest Implementiert - Sendet Durchgehend Strings *)
(*14/05/2025   	| 1.03      		| TC3		  		| N.Kersting       | Busauslastung direkt Implementiert *)
(*27/05/2025   	| 1.04      		| TC3		  		| N.Kersting       | Neuen Manuell Mode implementiert um einen Manuell generierten String allein zu Senden *)
(*28/05/2025   	| 1.05      		| TC3		  		| N.Kersting       | Neue Automatisch Ping Funktion hinzugefügt & Wichtiger Bugfix *)
(*====================================================================================================================================================*)
FUNCTION_BLOCK fb_RS485FiFoMaster
VAR_INPUT
	I_sSendCmdFiFo				:ARRAY[1..cMaxRS485CMDFiFo] OF STRING(255);
	I_stDeviceIdent				:ARRAY[1..cMaxRS485CMDFiFo] OF ST_HausBus_Ident;	(* Um Zyklisch einzelnt anzupingen *)
	
	I_bAutoPing					:BOOL;												(* Wenn Aktiv wird Zyklisch Automatisch ein Ping gesendet, welcher von den einzelnen Kommunikationsbausteinen ausgewertet werden kann *)
	I_tAutoPingTime				:TIME :=T#10S;										(* Die Intervallzeit, Bis ein Auto Ping gesendet wird *)
	
	I_bManuellMode				:BOOL := FALSE;
	I_sSendCmdManuell			:STRING(255);
	I_bSendManuell				:BOOL;
	I_bExecute					:BOOL := TRUE;
	I_bBusBelastungstest		:BOOL;
	I_bReset					:BOOL;
	I_sStartZeichen				:BYTE := 16#FD;										(* Startzeichen Präfix *)
	I_sEndZeichen				:BYTE := 16#FE;										(* Endzeichen Suffix *)
	I_pTxBuffer					:POINTER TO ComBuffer; 								(* Zeiger auf TX-Buffer*)
	I_pRxBuffer   				:POINTER TO ComBuffer;  							(* Zeiger auf RX-Buffer*)
END_VAR
VAR_OUTPUT
	Q_sReceiveString			:STRING(255);		
	Q_lrBusAuslastung			:LREAL;
	Q_bBusy						:BOOL;
	Q_bDone						:BOOL;
	Q_bError					:BOOL;
	Q_sState					:STRING;
	Q_stStates					:ST_FiFoMaster_State;
END_VAR
VAR
	bFirstCycle					:BOOL := TRUE;
	tVerzReceive				:TIME := T#30MS;									(* Zeit, die zum Empfangen bleibt *)
	
	rTrigSendManuell			:r_Trig;
	tonSend						:ton;
	fbSend     					:SendString255;
	fbReceive   				:ReceiveString255;
	sStartZeichen				:BYTE := 16#FD;										(* Startzeichen Präfix *)
	sEndZeichen					:BYTE := 16#FE;										(* Endzeichen Suffix *)
	sReceivedMEMString			:STRING(255);
	sReceivedString				:STRING(255);
	iStep						:INT;
	iStepReceive				:INT;
	iMaxBufferBlocking			:INT := 0;
	bBusyMem					:BOOL;
	sStep						:STRING;
	sString						:STRING(255);
	sStringSend					:STRING(255);
	tonVerzReceive				:ton;	
	tonTimeout					:ton;
	tonPingIntervall			:ton;
	
	bStringSend					:BOOL := FALSE;
	icntError					:INT;
	
	iFiFoRow					:INT := 1;
	icntFiFo					:INT;
	i,h							:INT;
	iStepFiFo					:INT;
	
	bPingStart					:BOOL;
	
	bBusBelastungstest			:BOOL := FALSE;
	bBusAuslastung				:BOOL := TRUE;
	fbBusAuslastung				:fb_FilterArray;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*============================================================================================*)
tonTimeout(
	PT:=T#1S);
	
tonVerzReceive(
	PT := tVerzReceive);

tonPingIntervall(
	IN := I_bAutoPing
			AND NOT bPingStart,
	PT := I_tAutoPingTime);
	
(* Busbelastungstest *)	
bBusBelastungstest := I_bBusBelastungstest;

sReceivedMEMString:='';
(*============================================================================================*)	
icntFiFo := 0;
FOR i := 1 TO cMaxRS485CMDFiFo BY 1 DO 
	IF (I_sSendCmdFiFo[i]<> '')
	THEN
		icntFiFo := icntFiFo +1;
	END_IF
END_FOR

rTrigSendManuell(
	CLK := I_bSendManuell);

(*============================================================================================*)
CASE iStepFiFo OF
-1:	sStep := 'FiFo INIT';
	bFirstCycle := FALSE;
	Q_bBusy := FALSE;
	bPingStart := FALSE;
	iFiFoRow := 1;
	
	FOR h := 1 TO cMaxRS485CMDFiFo BY 1 DO
		GVL_RS485FiFoSend.bSendDoneFiFo[h] :=TRUE;
	END_FOR
	
	iStepFiFo := 0;

(*============================================================================================*)
0:	sStep := 'Warten, dass FiFo gefüllt wird';
	iFiFoRow := 1;
	bStringSend := FALSE;
	Q_bBusy := FALSE;
		
	tonVerzReceive.IN := (I_pTxBuffer^.Count<= INT_TO_UINT(iMaxBufferBlocking));
	
	(* Wenn die Intervall Zeit abgelaufen ist Ping Start setzen *)
	IF tonPingIntervall.Q
	THEN
		bPingStart := TRUE;
	END_IF
	
	IF (icntFiFo > 0
		OR  bBusBelastungstest
		OR I_bManuellMode)
		AND NOT bFirstCycle
		AND NOT fbReceive.StringReceived
		AND NOT bPingStart
		AND tonVerzReceive.Q
	THEN
		Q_bBusy := TRUE;
		iStepFiFo := 1;
	ELSIF
		bFirstCycle
	THEN
		iStepFiFo := -1;
	ELSIF
		bPingStart
		AND NOT bFirstCycle
		AND NOT fbReceive.StringReceived
		AND tonVerzReceive.Q
	THEN
		iStepFiFo := 10;	(* Ping senden *)
	END_IF
	
(*============================================================================================*)	
1:	sStep := 'Prüfen ob STRING in FiFo Zeile gefüllt*';
	
	(* Manueller Modus *)
	IF I_bManuellMode
	THEN
		(* Prüfen ob in der Zeile etwas steht *)
		IF I_sSendCmdManuell <>''
			AND rTrigSendManuell.Q
		THEN
			IF NOT I_pTxBuffer^.blocked
				AND (I_pTxBuffer^.Error=0)
				AND NOT fbReceive.StringReceived
			THEN
				sString :=	I_sSendCmdManuell; 
				bStringSend := TRUE;
				Q_bDone := FALSE;
				Q_bError := FALSE;
				iStepFiFo := iStepFiFo+1;
			END_IF
		END_IF
	ELSE
		(* Prüfen ob in der ausgewählten Zeile etwas steht *)
		sStringSend :=	I_sSendCmdFiFo[iFiFoRow]; 
		IF I_sSendCmdFiFo[iFiFoRow] = ''
		THEN
			IF iFiFoRow < cMaxRS485CMDFiFo
			THEN
				iFiFoRow := iFiFoRow+1; (* Nächste Zeile, bis etwas drin Steht *)
			ELSE
				IF bBusBelastungstest
				THEN
					sStringSend :=	CONCAT(F_ToCHR(sStartZeichen),'ServiceTOOL-BUSBELASTUNGSTEST-BURSTFIREMODE');
					sStringSend :=	CONCAT(sStringSend,F_ToCHR(sEndZeichen));
					(* Senden *)
					
					IF NOT I_pTxBuffer^.blocked
						AND (I_pTxBuffer^.Error=0)
						AND NOT fbReceive.StringReceived
					THEN
						sStep := 'Prüfe ob Senden noch aktiv ist';
						bStringSend := TRUE;
						sString :=	sStringSend;
						Q_bDone := FALSE;
						Q_bError := FALSE;
						iStepFiFo := iStepFiFo+1;
					END_IF
				ELSE
					iStepFiFo := 0;	(* Alle Zeilen Abgearbeitet *)
				END_IF
			END_IF
		ELSE
		(* Senden *)
		GVL_RS485FiFoSend.bSendDoneFiFo[iFiFoRow] :=FALSE;
		
			IF NOT I_pTxBuffer^.blocked
				AND (I_pTxBuffer^.Error=0)
				AND NOT fbReceive.StringReceived
			THEN
				sStep := 'Prüfe ob Senden noch aktiv ist';
				bStringSend := TRUE;
				sString :=	sStringSend;
				Q_bDone := FALSE;
				Q_bError := FALSE;
				iStepFiFo := iStepFiFo+1;
			END_IF
		END_IF
	END_IF
	
(*============================================================================================*)		
2:	sStep := 'Starte Senden';
	Q_bBusy := TRUE;
	tonTimeout.IN := fbSend.Busy;
	
	IF NOT fbSend.Busy
		AND NOT fbReceive.StringReceived
	THEN
		tonSend.IN := FALSE;
		bStringSend := FALSE;
		iStepFiFo := iStepFiFo+1;
	ELSIF
		(fbSend.Error >0)
		AND NOT (fbSend.Error = 2)
	THEN
		sStep := CONCAT('ERROR-',sStep);
		sStep := CONCAT(sStep,'- ');
		sStep := CONCAT(sStep,INT_TO_STRING(fbSend.Error));
		iStepFiFo := -2;
	ELSIF
		tonTimeout.Q
	THEN
		sStep := CONCAT('ERROR- Timeout',sStep);
		iStepFiFo := -2;
	END_IF
	
(*============================================================================================*)		
3:	(* Senden*)		
	GVL_RS485FiFoSend.bSendDoneFiFo[iFiFoRow] :=TRUE;
	
	IF iFiFoRow < cMaxRS485CMDFiFo
	THEN
		iFiFoRow := iFiFoRow+1;
		iStepFiFo := 1;
	ELSE
		Q_bDone := TRUE;
		iStepFiFo := 0;
	END_IF
	
(*============================================================================================*)	
(* Ping Senden Ablauf *)
(*============================================================================================*)	
10:	sStep := 'Sende Ping*';
	
	(* Ping String erstellen *)
	sStringSend:=	CONCAT(F_ToCHR(I_sStartZeichen),DINT_TO_STRING(I_stDeviceIdent[iFiFoRow].diID));
	sStringSend :=	CONCAT(sStringSend,'.');
	sStringSend :=	CONCAT(sStringSend ,I_stDeviceIdent[iFiFoRow].sPingIdent); 
	sStringSend :=	CONCAT(sStringSend,F_ToCHR(I_sEndZeichen));
	
	IF I_stDeviceIdent[iFiFoRow].sPingIdent = ''
		OR I_stDeviceIdent[iFiFoRow].diID = 0
	THEN
		IF iFiFoRow < cMaxRS485CMDFiFo
		THEN
			iFiFoRow := iFiFoRow+1; (* Nächste Zeile, bis etwas drin Steht *)
		ELSE
			bPingStart := FALSE;
			iStepFiFo := 0;	(* Alle Zeilen Abgearbeitet *)
		END_IF
	ELSE
	(* Senden *)	
		IF NOT I_pTxBuffer^.blocked
			AND (I_pTxBuffer^.Error=0)
			AND NOT fbReceive.StringReceived
		THEN
			sStep := 'Prüfe ob Senden noch aktiv ist';
			bStringSend := TRUE;
			sString :=	sStringSend;
			Q_bDone := FALSE;
			Q_bError := FALSE;
			iStepFiFo := iStepFiFo+1;
		END_IF
	END_IF
	
(*============================================================================================*)		
11:	sStep := 'Starte Senden';
	Q_bBusy := TRUE;
	tonTimeout.IN := fbSend.Busy;
	
	IF NOT fbSend.Busy
		AND NOT fbReceive.StringReceived
	THEN
		tonSend.IN := FALSE;
		bStringSend := FALSE;
		iStepFiFo := iStepFiFo+1;
	ELSIF
		(fbSend.Error >0)
		AND NOT (fbSend.Error = 2)
	THEN
		sStep := CONCAT('ERROR-',sStep);
		sStep := CONCAT(sStep,'- ');
		sStep := CONCAT(sStep,INT_TO_STRING(fbSend.Error));
		iStepFiFo := -2;
	ELSIF
		tonTimeout.Q
	THEN
		sStep := CONCAT('ERROR- Timeout',sStep);
		iStepFiFo := -2;
	END_IF
	
(*============================================================================================*)		
12:	(* Senden*)		

	IF iFiFoRow < cMaxRS485CMDFiFo
	THEN
		iFiFoRow := iFiFoRow+1;
		iStepFiFo := 10;
	ELSE
		bPingStart := FALSE;
		iStepFiFo := 0;
	END_IF
	
ELSE
(*============================================================================================*)
	Q_bError := TRUE;
	Q_bBusy := FALSE;
	bBusyMem := FALSE;
	tonTimeout.IN := FALSE;
	
	IF I_bReset
	THEN
		iStepFiFo := 0;
	END_IF
END_CASE

IF bStringSend
THEN
	fbSend(
		SendString:= 	sString,
		TXbuffer:= 		I_pTxBuffer^);
ELSE
	(* Empfangen *)
	ac00_Receive();
END_IF

(* Empfangsmerker 0 Setzen am ende Eines Zyklus *)
Q_sReceiveString := sReceivedMEMString;

(* Busauslastung tracken*)
ac99_Diagnose();

Q_sState :=	sStep;

(* StatusStruktur für Visu *)
Q_stStates.bBusy				:=	Q_bBusy;
Q_stStates.bDone				:=	Q_bDone;
Q_stStates.bError				:=	Q_bError;
Q_stStates.iFiFoCount			:=	icntFiFo;
Q_stStates.iFiFoRow				:=	iFiFoRow;
Q_stStates.lrBusAuslastung		:=	Q_lrBusAuslastung;
Q_stStates.sReceiveString 		:=	Q_sReceiveString;
Q_stStates.sSendString 			:=	sString;
Q_stStates.sState 				:=	Q_sState;
]]></ST>
    </Implementation>
    <Action Name="ac00_Receive" Id="{e073380d-3387-459f-9bfa-efd9719ad95b}">
      <Implementation>
        <ST><![CDATA[(* Empfangen *)
CASE iStepReceive OF		
0:	fbReceive(
		Prefix := 			F_ToCHR(sStartZeichen),
		Suffix := 			F_ToCHR(sEndZeichen),
		Timeout:= , 
		Reset:= , 
		StringReceived=> , 
		Busy=> , 
		Error=> , 
		RxTimeout=> , 
		ReceivedString:= 	sReceivedString, 
		RXbuffer:= 			I_pRxBuffer^);
		
	IF fbReceive.StringReceived
	THEN
		iStepReceive := 1;
		sReceivedMEMString := sReceivedString;
	END_IF
	
1:	sReceivedString := '';
	iStepReceive := 0;
	
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="ac99_Diagnose" Id="{0748b0ff-dc5e-4fed-b339-00f4691b5b72}">
      <Implementation>
        <ST><![CDATA[(* Busauslastung Prüfen *)
fbBusAuslastung(
	I_bExcecute:= 	bBusAuslastung, 
	I_nWert:= 		UINT_TO_LREAL(I_pTxBuffer^.Count), 
	I_nFilterWert:= 50, 
	Q_nFilter=> 	Q_lrBusAuslastung);
	
	]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="fb_RS485FiFoMaster">
      <LineId Id="676" Count="0" />
      <LineId Id="681" Count="0" />
      <LineId Id="677" Count="0" />
      <LineId Id="812" Count="0" />
      <LineId Id="807" Count="0" />
      <LineId Id="809" Count="0" />
      <LineId Id="1223" Count="0" />
      <LineId Id="861" Count="0" />
      <LineId Id="1239" Count="0" />
      <LineId Id="1398" Count="0" />
      <LineId Id="1224" Count="1" />
      <LineId Id="811" Count="0" />
      <LineId Id="859" Count="1" />
      <LineId Id="683" Count="0" />
      <LineId Id="680" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="489" Count="0" />
      <LineId Id="492" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="1073" Count="0" />
      <LineId Id="684" Count="0" />
      <LineId Id="1074" Count="0" />
      <LineId Id="1072" Count="0" />
      <LineId Id="503" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="711" Count="0" />
      <LineId Id="718" Count="0" />
      <LineId Id="926" Count="0" />
      <LineId Id="1229" Count="0" />
      <LineId Id="719" Count="1" />
      <LineId Id="715" Count="2" />
      <LineId Id="726" Count="0" />
      <LineId Id="714" Count="0" />
      <LineId Id="713" Count="0" />
      <LineId Id="660" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="513" Count="0" />
      <LineId Id="518" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="1234" Count="0" />
      <LineId Id="687" Count="0" />
      <LineId Id="1393" Count="0" />
      <LineId Id="1399" Count="0" />
      <LineId Id="1394" Count="1" />
      <LineId Id="1397" Count="0" />
      <LineId Id="1396" Count="0" />
      <LineId Id="821" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="857" Count="0" />
      <LineId Id="1148" Count="0" />
      <LineId Id="705" Count="0" />
      <LineId Id="787" Count="0" />
      <LineId Id="1238" Count="0" />
      <LineId Id="822" Count="0" />
      <LineId Id="509" Count="0" />
      <LineId Id="928" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="706" Count="0" />
      <LineId Id="708" Count="1" />
      <LineId Id="707" Count="0" />
      <LineId Id="1240" Count="2" />
      <LineId Id="1484" Count="0" />
      <LineId Id="1483" Count="0" />
      <LineId Id="1243" Count="1" />
      <LineId Id="506" Count="0" />
      <LineId Id="659" Count="0" />
      <LineId Id="510" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="541" Count="0" />
      <LineId Id="685" Count="0" />
      <LineId Id="1076" Count="0" />
      <LineId Id="1080" Count="0" />
      <LineId Id="1135" Count="0" />
      <LineId Id="1083" Count="0" />
      <LineId Id="1149" Count="0" />
      <LineId Id="1084" Count="0" />
      <LineId Id="1144" Count="1" />
      <LineId Id="1143" Count="0" />
      <LineId Id="1146" Count="0" />
      <LineId Id="1136" Count="0" />
      <LineId Id="1139" Count="0" />
      <LineId Id="1141" Count="0" />
      <LineId Id="1137" Count="0" />
      <LineId Id="1086" Count="0" />
      <LineId Id="1147" Count="0" />
      <LineId Id="1085" Count="0" />
      <LineId Id="1087" Count="1" />
      <LineId Id="1133" Count="0" />
      <LineId Id="1090" Count="25" />
      <LineId Id="1117" Count="15" />
      <LineId Id="1089" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="658" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="637" Count="3" />
      <LineId Id="789" Count="0" />
      <LineId Id="641" Count="16" />
      <LineId Id="547" Count="0" />
      <LineId Id="1347" Count="0" />
      <LineId Id="1313" Count="0" />
      <LineId Id="511" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="668" Count="5" />
      <LineId Id="931" Count="0" />
      <LineId Id="674" Count="0" />
      <LineId Id="553" Count="0" />
      <LineId Id="1480" Count="0" />
      <LineId Id="1407" Count="0" />
      <LineId Id="1479" Count="0" />
      <LineId Id="1408" Count="70" />
      <LineId Id="688" Count="0" />
      <LineId Id="554" Count="0" />
      <LineId Id="690" Count="1" />
      <LineId Id="929" Count="0" />
      <LineId Id="693" Count="2" />
      <LineId Id="689" Count="0" />
      <LineId Id="701" Count="0" />
      <LineId Id="703" Count="0" />
      <LineId Id="702" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="630" Count="4" />
      <LineId Id="794" Count="0" />
      <LineId Id="806" Count="0" />
      <LineId Id="795" Count="0" />
      <LineId Id="826" Count="1" />
      <LineId Id="784" Count="0" />
      <LineId Id="783" Count="0" />
      <LineId Id="921" Count="0" />
      <LineId Id="785" Count="0" />
      <LineId Id="922" Count="0" />
      <LineId Id="925" Count="0" />
      <LineId Id="924" Count="0" />
      <LineId Id="1006" Count="0" />
      <LineId Id="994" Count="0" />
      <LineId Id="993" Count="0" />
      <LineId Id="996" Count="2" />
      <LineId Id="1000" Count="1" />
      <LineId Id="1003" Count="2" />
      <LineId Id="1002" Count="0" />
    </LineIds>
    <LineIds Name="fb_RS485FiFoMaster.ac00_Receive">
      <LineId Id="25" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="20" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="fb_RS485FiFoMaster.ac99_Diagnose">
      <LineId Id="8" Count="0" />
      <LineId Id="2" Count="3" />
      <LineId Id="1" Count="0" />
      <LineId Id="6" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>